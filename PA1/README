Name: Nicholas Guerrero
USC NetID: ng55585
CS 455 PA1
Fall 2021

----------------------------------------------
CERTIFY IT'S YOUR WORK

"I certify that the work submitted for this assignment does not
violate USC's student conduct code.  In particular, the work is my
own, not a collaboration, and does not involve code created by other
people, except for the the resources explicitly mentioned in the CS 455
Course Syllabus.  And I did not share my solution or parts of it with
other students in the course."

Initial below to "sign" the above statement:
NG

----------------------------------------------
ACKNOWLEDGE ANY OUTSIDE SOURCES

List here any code you submitted for this assignment that was written
with significant help of a course staff member, or code used from the
textbook.  Be specific about what methods or algorithms are involved,
and what sections of the textbook are involved (if applicable): [you do
not need to list any of the code that we wrote for the assignment,
i.e., the contents of the starter files for the assignment]

code for Scanner class from 4.3.1 of textbook
JFrame code in CoinSimViewer.java from 2.10.1-2.10.4



----------------------------------------------
KNOWN BUGS or LIMITATIONS:



----------------------------------------------
ANY OTHER NOTES FOR THE GRADER:

To compile and run:
javac *.java
java CoinSimViewer
java CoinSumuatorTester

----------------------------------------------
ANSWERS TO ASSIGNMENT README QUESTIONS (if applicable):


1. In CS 455 what code from the web are you allowed to use in your assignment solution, assuming you modify that code once you get it? (No clue? Hint: Reread the syllabus.) Note: no need to mention the "starter files" for the assignment in your answer.

For code not written by myself, I am are required to acknowledge my sources in my README file

2. What is the probability of each of the three outcomes in a trial: two heads, one head and one tail, and two tails? Why is one of them different than the other two?

two heads : 25%
one head and one tail : 50%
two tails : 25%

(assuming independence of events)
by the laws of statistics (Product Rule): probability of event A * event B = probabilit of event A & B
probability of the occurrence of two independent events is the product of their individual probabilities
Thus
probability of two heads = 1/2 * 1/2 = 1/4 or 25%
probability of two tails = 1/2 * 1/2 = 1/4 or 25%

For the probability of  one head and one tail, the probability of the occurrence of two mutually exclusive events is the sum of their individual probabilities. The probability of getting one head and one tail on the toss of two coins is 0.5. There are two different ways that this can happen. The first coin can come up heads and the second coin can come up tails, or the first coin can come up tails and the second coin can come up heads. In any single trial, it is not possible for both of these outcomes to occur, so these are mutually exclusive.
There are four possible mutually exclusive outcomes on the toss of two coins as shown, each with a probability of 0.25. The sum of the probability of two of these outcomes (heads, tails or tails, heads) is 0.25 + 0.25 = 0.5 or 50%.

3. Roughly how many trials do you need to do before you mostly get results within 1% of these probabilities? Do several simulations using your program to determine an answer to this.

To CONSISTENTLY be within 1% of the expected probabilities it takes my program roughly 1000 trials

4. Roughly how many trials can you do before it crashes with an overflow error? State the largest value you tried where it still worked correctly, and one where it overflowed. You can get an idea of what general values to try by looking at the limits on Java integers (see Section 4.1.1 of the text). Play around with your program to verify that it actually works for very large values that are within the limits. Note: this kind of testing can sometimes turn up bugs, so it's good to do. Warning: For very large values you may have to wait a fair amount of time before you get the results.

Exactly on the number 2,147,483,648

Output from console :

Enter number of trials: 2147483648
Exception in thread "main" java.util.InputMismatchException: For input string: "2147483648"
        at java.base/java.util.Scanner.nextInt(Scanner.java:2264)
        at java.base/java.util.Scanner.nextInt(Scanner.java:2212)
        at CoinSimViewer.main(CoinSimViewer.java:17)
bash-3.2$ java CoinSimViewer
Enter number of trials: 2147483647

This makes sense as 2,147,483,648 is Java's max integer value (Integer.MAX_VALUE)

